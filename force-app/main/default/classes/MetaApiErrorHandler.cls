/**
 * @description A public utility class to handle and interpret API error responses from the Meta (Facebook/WhatsApp) platform.
 * It translates HTTP status codes and specific Meta error codes into a structured map containing a user-friendly message and solution.
 * @author Gemini
 * @date August 5, 2025
 */
/**
* Class Name: MetaApiErrorHandler
* @description: A public utility class to handle and interpret API error responses from the Meta (Facebook/WhatsApp) platform.
* Created Date: 05 Aug, 2025
* Created By: Mitrajsinh Gohil
*--------------------------------------------------------------------------------
* Last Modified By: Mitrajsinh Gohil
* Last Modified Date: 05 Aug 2025
* Last Modification Description: Updated the field api name for template header, body and footer
*--------------------------------------------------------------------------------
* Modification History:
* Date Modified - Developer Name - Description
* 05 Aug, 2025  - Mitrajsinh Gohil - Created the class with a public method which returns the appropriate message and solution for the meta error.
**/
public class MetaApiErrorHandler {

    /**
     * @description Public method to process an HttpResponse from a Meta API callout.
     * @param response The HttpResponse object received from the callout.
     * @return A Map<String, String> containing the 'code', 'message', and 'solution' for the identified error.
     */
    public Map<String, String> handleApiError(HttpResponse response) {
        Integer statusCode = response.getStatusCode();
        String responseBody = response.getBody();
        
        Map<String, String> errorDetails = new Map<String, String>{
            'code' => 'UNKNOWN_ERROR',
            'message' => 'An unknown error occurred. Status Code: ' + statusCode,
            'solution' => 'Please check the developer logs for the full response and contact support if the issue persists.'
        };

        switch on statusCode {
            when 400 { // Bad Request - Requires parsing the body for specific Meta codes
                Map<String, Object> metaError = parseApiErrorBody(responseBody);
                if (metaError != null && metaError.containsKey('code')) {
                    Integer metaCode = (Integer) metaError.get('code');
                    errorDetails.put('message', 'Bad Request: ' + (String) metaError.get('message'));

                    System.debug('MetaCode'+ metaCode);
                    
                    // Nested switch for specific Meta error codes
                    switch on metaCode {
                        // Parameter & Formatting Errors
                        when 100 { errorDetails.put('code', 'INVALID_PARAMETER'); errorDetails.put('solution', 'The request included an unsupported or misspelled parameter. Check the API documentation for correct parameter names and formats.'); }
                        when 131008 { errorDetails.put('code', 'MISSING_PARAMETER'); errorDetails.put('solution', 'A required piece of information is missing. Ensure all template fields and recipient details are filled out.'); }
                        when 131009, 33 { errorDetails.put('code', 'INVALID_PARAMETER_VALUE'); errorDetails.put('solution', 'A parameter value is invalid. Check the API documentation for supported values (e.g., ensure the phone number is correct and added to the WABA).'); }
                        when 131021 { errorDetails.put('code', 'RECIPIENT_CANNOT_BE_SENDER'); errorDetails.put('solution', 'The recipient\'s phone number cannot be the same as the sender\'s. Please use a different recipient number.'); }
                        when 131051 { errorDetails.put('code', 'UNSUPPORTED_MESSAGE_TYPE'); errorDetails.put('solution', 'The message type you are trying to send is not supported. Please check the API documentation for a list of supported message types.'); }
                        
                        // Template Errors
                        when 132000 { errorDetails.put('code', 'TEMPLATE_PARAM_COUNT_MISMATCH'); errorDetails.put('solution', 'The number of variables sent does not match the number of placeholders in the template. Please verify all placeholders like {{1}}, {{2}} are filled.'); }
                        when 132001 { errorDetails.put('code', 'TEMPLATE_NOT_FOUND'); errorDetails.put('solution', 'This template does not exist in the specified language or has not been approved. Verify the template name and language, and check its status in WhatsApp Manager.'); }
                        when 132005 { errorDetails.put('code', 'TEMPLATE_TEXT_TOO_LONG'); errorDetails.put('solution', 'The text generated by filling the template variables is too long. Please shorten the content of your variables.'); }
                        when 132007 { errorDetails.put('code', 'TEMPLATE_POLICY_VIOLATION'); errorDetails.put('solution', 'The template content violates a WhatsApp policy. Please review the template in WhatsApp Manager for rejection reasons.'); }
                        when 132012 { errorDetails.put('code', 'TEMPLATE_PARAM_FORMAT_MISMATCH'); errorDetails.put('solution', 'A variable parameter is formatted incorrectly (e.g., a number was provided for a text field). Check the variable formats in your template.'); }
                        when 132015 { errorDetails.put('code', 'TEMPLATE_PAUSED'); errorDetails.put('solution', 'This template is paused due to low quality ratings. Please edit the template in WhatsApp Manager to improve its quality.'); }
                        when 132016 { errorDetails.put('code', 'TEMPLATE_DISABLED'); errorDetails.put('solution', 'This template has been permanently disabled due to repeated low quality ratings. You must create a new template.'); }

                        // Recipient/User Errors
                        when 131026 { errorDetails.put('code', 'MESSAGE_UNDELIVERABLE'); errorDetails.put('solution', 'The recipient\'s phone number may not be on WhatsApp or they may need to update their app or accept new Terms of Service.'); }
                        when 131047 { errorDetails.put('code', 'RE_ENGAGEMENT_ERROR'); errorDetails.put('solution', 'It has been more than 24 hours since the user last messaged you. You must use an approved Message Template to start a new conversation.'); }
                        when 131050 { errorDetails.put('code', 'USER_OPTED_OUT_MARKETING'); errorDetails.put('solution', 'This user has opted out of receiving marketing messages from your business. You cannot send them marketing templates.');}

                        // Media Errors
                        when 131052 { errorDetails.put('code', 'MEDIA_DOWNLOAD_ERROR'); errorDetails.put('message', 'WhatsApp could not download the media from the user.'); errorDetails.put('solution', 'Ask the user to send the media again or through a different channel.'); }
                        when 131053 { errorDetails.put('code', 'MEDIA_UPLOAD_ERROR'); errorDetails.put('solution', 'Unable to upload the media. Ensure the file type is supported (e.g., JPG, PNG, MP4) and the link is publicly accessible.'); }
                        
                        // Throttling/Rate Limit Errors
                        when 4, 80007, 130429 { errorDetails.put('code', 'RATE_LIMIT_HIT'); errorDetails.put('solution', 'The API call limit has been reached. Please reduce the frequency of messages or try again after a short wait.'); }
                        when 131048 { errorDetails.put('code', 'SPAM_RATE_LIMIT_HIT'); errorDetails.put('solution', 'Message sending is restricted due to a low quality rating. Check your phone number\'s quality status in WhatsApp Manager.'); }
                        when 131056 { errorDetails.put('code', 'USER_PAIR_RATE_LIMIT_HIT'); errorDetails.put('solution', 'You have sent too many messages to this specific user in a short time. Please wait before sending more messages to this person.'); }

                        // Account/Policy Errors
                        when 368, 131031 { errorDetails.put('code', 'ACCOUNT_LOCKED_OR_DISABLED'); errorDetails.put('message', 'This account has been restricted or disabled for a policy violation.'); errorDetails.put('solution', 'An administrator should check the account status in Meta Business Suite and follow the instructions to appeal or resolve the issue.'); }
                        when 130497 { errorDetails.put('code', 'COUNTRY_RESTRICTION'); errorDetails.put('message', 'This business account is restricted from messaging users in this country.'); errorDetails.put('solution', 'Please review the WhatsApp Business Messaging Policy for details on country-specific restrictions.');}
                        when 131042 { errorDetails.put('code', 'PAYMENT_ISSUE'); errorDetails.put('message', 'There is an issue with the payment method for this account.'); errorDetails.put('solution', 'An administrator needs to verify the billing setup in the WhatsApp Business Account, checking the credit line and payment status.'); }
                        
                        when else { errorDetails.put('code', 'UNKNOWN_BAD_REQUEST'); errorDetails.put('solution', 'The request was invalid for an unknown reason. Please double-check all parameters and consult the developer logs.'); }
                    }
                } else {
                    errorDetails.put('code', 'INVALID_REQUEST');
                    errorDetails.put('message', 'The API request was invalid, but no detailed error code was returned.');
                    errorDetails.put('solution', 'Please ensure all template variables and recipient number are correct. Check the developer logs for the raw response.');
                }
            }
            when 401 {
                errorDetails.put('code', 'AUTH_ERROR');
                errorDetails.put('message', '401 Unauthorized: The Access Token is invalid or expired.');
                errorDetails.put('solution', 'An administrator must go to the app configuration page and update the Permanent Access Token from the Meta Business portal.');
            }
            when 403 {
                errorDetails.put('code', 'PERMISSION_DENIED');
                errorDetails.put('message', '403 Forbidden: Permission denied.');
                errorDetails.put('solution', 'This may be a permissions issue with your access token or an account-level restriction (like a policy violation). Check the account status in Meta Business Suite.');
            }
            when 404 {
                Map<String, Object> metaError = parseApiErrorBody(responseBody);
                if (metaError != null && metaError.containsKey('code')) {
                    Integer metaCode = (Integer) metaError.get('code');
                    errorDetails.put('message', 'Bad Request: ' + (String) metaError.get('message'));

                    System.debug('MetaCode '+ metaCode);
                    
                    // Nested switch for specific Meta error codes
                    switch on metaCode {
                        // Parameter & Formatting Errors
                        when 132001 { errorDetails.put('code', 'TEMPLATE_NOT_FOUND'); errorDetails.put('solution', 'This template does not exist in the specified language or has not been approved. Verify the template name and language, and check its status in WhatsApp Manager.'); }
                        
                        when else { errorDetails.put('code', 'UNKNOWN_BAD_REQUEST'); errorDetails.put('solution', 'The request was invalid for an unknown reason. Please double-check all parameters and consult the developer logs.'); }
                    }
                } else {
                    errorDetails.put('code', 'INVALID_REQUEST');
                    errorDetails.put('message', 'The API request was invalid, but no detailed error code was returned.');
                    errorDetails.put('solution', 'Please ensure all template variables and recipient number are correct. Check the developer logs for the raw response.');
                }
            }
            when 429 {
                errorDetails.put('code', 'RATE_LIMIT_HIT');
                errorDetails.put('message', '429 Too Many Requests: You have sent too many messages in a short period.');
                errorDetails.put('solution', 'Please wait for a minute before sending more messages.');
            }
            when 500, 503 {
                errorDetails.put('code', 'META_SERVER_ERROR');
                errorDetails.put('message', 'A temporary error occurred on the WhatsApp Business server.');
                errorDetails.put('solution', 'This is a temporary issue on Meta\'s side. Please wait a few minutes and try sending the message again.');
            }
        }
        return errorDetails;
    }
    
    /**
    * @description Safely parses the error response body from Meta's response to extract the full error object.
    * @param responseBody The raw string body from the HttpResponse.
    * @return A Map representing the 'error' object, or null if parsing fails or 'error' key doesn't exist.
    */
    private Map<String, Object> parseApiErrorBody(String responseBody) {
        try {
            Map<String, Object> bodyMap = (Map<String, Object>) JSON.deserializeUntyped(responseBody);
            if (bodyMap.containsKey('error')) {
                return (Map<String, Object>) bodyMap.get('error');
            }
            return null;
        } catch (Exception e) {
            System.debug('Could not deserialize error response body: ' + responseBody);
            return null;
        }
    }
}